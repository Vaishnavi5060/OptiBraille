import RPi.GPIO as GPIO
import time

RELAY_PINS = [17, 27, 22, 23, 24, 25]

BRAILLE_DICT = {
    'a': [1, 0, 0, 0, 0, 0], 'b': [1, 0, 1, 0, 0, 0],
    'c': [1, 1, 0, 0, 0, 0], 'd': [1, 1, 0, 1, 0, 0],
    'e': [1, 0, 0, 1, 0, 0], 'f': [1, 1, 1, 0, 0, 0],
    'g': [1, 1, 1, 1, 0, 0], 'h': [1, 0, 1, 1, 0, 0],
    'i': [0, 1, 1, 0, 0, 0], 'j': [0, 1, 1, 1, 0, 0],
    'k': [1, 0, 0, 0, 1, 0], 'l': [1, 0, 1, 0, 1, 0],
    'm': [1, 1, 0, 0, 1, 0], 'n': [1, 1, 0, 1, 1, 0],
    'o': [1, 0, 0, 1, 1, 0], 'p': [1, 1, 1, 0, 1, 0],
    'q': [1, 1, 1, 1, 1, 0], 'r': [1, 0, 1, 1, 1, 0],
    's': [0, 1, 1, 0, 1, 0], 't': [0, 1, 1, 1, 1, 0],
    'u': [1, 0, 0, 0, 1, 1], 'v': [1, 0, 1, 0, 1, 1],
    'w': [0, 1, 1, 1, 0, 1], 'x': [1, 1, 0, 0, 1, 1],
    'y': [1, 1, 0, 1, 1, 1], 'z': [1, 0, 0, 1, 1, 1],
    ' ': [0, 0, 0, 0, 0, 0]
}

NUMBER_SIGN = [0, 1, 0, 1, 1, 1]

BRAILLE_NUMBERS = {
    '1': BRAILLE_DICT['a'], '2': BRAILLE_DICT['b'], '3': BRAILLE_DICT['c'],
    '4': BRAILLE_DICT['d'], '5': BRAILLE_DICT['e'], '6': BRAILLE_DICT['f'],
    '7': BRAILLE_DICT['g'], '8': BRAILLE_DICT['h'], '9': BRAILLE_DICT['i'],
    '0': BRAILLE_DICT['j']
}

GPIO.setmode(GPIO.BCM)
for pin in RELAY_PINS:
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, GPIO.HIGH)

def activate_braille(pattern):
    for i, pin in enumerate(RELAY_PINS):
        GPIO.output(pin, GPIO.LOW if pattern[i] else GPIO.HIGH)
    time.sleep(5)
    for pin in RELAY_PINS:
        GPIO.output(pin, GPIO.HIGH)

def display_character(char, prev_was_digit):
    if char.isdigit():
        if not prev_was_digit:
            print("Displaying number sign (â ¼)")
            activate_braille(NUMBER_SIGN)
            time.sleep(0.5)
        pattern = BRAILLE_NUMBERS[char]
    elif char in BRAILLE_DICT:
        pattern = BRAILLE_DICT[char]
    else:
        print(f"Character '{char}' not supported in Braille.")
        return prev_was_digit
    print(f"Displaying '{char}' in Braille:", pattern)
    activate_braille(pattern)
    return char.isdigit()

try:
    while True:
        text = input("Enter text: ").lower()
        prev_was_digit = False
        for char in text:
            prev_was_digit = display_character(char, prev_was_digit)
            time.sleep(0.5)
except KeyboardInterrupt:
    print("\nExiting program.")
finally:
    GPIO.cleanup()
